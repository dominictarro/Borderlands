"""
Module for manipulating Prefect Blocks.
"""
from pathlib import Path

from prefect_aws import S3Bucket

from .loggers import get_prefect_or_default_logger


def create_bucket_with_resolved_subpath(
    key: str,
    __bucket: S3Bucket,
) -> S3Bucket:
    """Creates a child `S3Bucket` of `bucket` whose `bucket_folder` is within
    `bucket.bucket_folder`.

    Parameters
    ----------
    key : str
        Child path from `bucket.bucket_folder`
    __bucket : S3Bucket
        `S3Bucket` to create a child from

    Returns
    -------
    S3Bucket
        `S3Bucket` whose `bucket_folder` is `bucket.bucket_folder`/`key`

    Examples
    --------
    >>> bucket: S3Bucket = ...
    >>> # bucket.bucket_folder == "base_folder/"
    >>> child_bucket = create_bucket_with_resolved_subpath(
        "child_folder", bucket
    )
    >>> # child_bucket.bucket_folder == "base_folder/child_folder/"
    """
    new_bucket_folder: Path | str = __bucket._resolve_path(key)

    # While prefect_aws.S3Bucket is moving to the `bucket_folder` attribute,
    # LocalFileSystem still uses `basepath`
    update = {}
    if hasattr(__bucket, "bucket_folder"):
        update["bucket_folder"] = new_bucket_folder
    elif hasattr(__bucket, "basepath"):
        update["basepath"] = new_bucket_folder
    else:
        raise TypeError(f"{__bucket!s} does not have attribute 'basepath'")
    return __bucket.copy(update=update)


def create_child_bucket(
    key: str, suffix: str, parent: S3Bucket, save: bool = False
) -> S3Bucket:
    """Creates a child bucket with a derived _block_document_name.

    Parameters
    ----------
    key : str
        Child bucket's subpath
    suffix : str
        Suffix to append to the parent's document name
    parent : S3Bucket
        Bucket to create a child from
    save : bool, optional
        If True, call `_save` with `is_anonymous` and `overwrite` set to True,
        by default False

    Returns
    -------
    S3Bucket
        Returns the child

    Examples
    --------
    >>> bucket: S3Bucket = ...
    >>> # bucket._bucket_folder == "base_folder/"
    >>> # bucket._block_document_name == "base_folder"
    >>> child_bucket = create_child_bucket("child_folder", "_child", bucket)
    >>> # child_bucket._block_document_name == "base_folder_child"
    >>> # child_bucket._bucket_folder == "base_folder/child_folder/"
    """
    child = create_bucket_with_resolved_subpath(key, parent)
    child = child.copy(
        # https://github.com/PrefectHQ/prefect/blob/main/src/prefect/results.py
        # Exclude the _block_document_id, this can be generated by the
        # ResultFactory and it will be saved anonymously there
        exclude={"_block_document_id"},
        update={
            "_block_document_name": parent._block_document_name + suffix,
            "_is_anonymous": True,
        },
    )
    if save:
        child._save(is_anonymous=True, overwrite=True)
    return child


def task_persistence_subfolder(
    bucket: S3Bucket,
    key: str | None = None,
    suffix: str | None = None,
):
    """Decorator to set the `task.result_storage` attribute to a subfolder of
    `bucket`. `key` will be relative to the existing `bucket.bucket_folder`.
    If no key is given, then `task.fn.__name__` will be used as the subfolder.
    If `suffix` is given, it will be appended to the anonymous block name.

    NOTE This method does not alter the `result_serializer` or
    `persist_result` attributes. `**kwds` are passed to
    `create_bucket_with_resolved_subpath`.

    Parameters
    ----------
    bucket : S3Bucket
        `S3Bucket` to create a child folder for
    key : str, optional
        Folder to resolve `bucket_folder` to, by default None
    suffix : str, optional
        Suffix to append to anonymous block name, by default None

    Returns
    -------
    Callable
        Task whose `result_storage` outputs to a subfolder

    Examples
    --------
    ```python
    from prefect import task
    from prefect_aws import S3Bucket
    from symph.prefect_utils.blocks import task_persistence_subfolder

    bucket: S3Bucket = ...
    # bucket.bucket_folder == "base_folder/"

    @task_persistence_subfolder(bucket)
    @task(persist_result=True)
    def persisted_task(data: dict) -> dict:
        '''A task whose return value is persisted in a subfolder of `bucket`.
        '''
        ...

    # Results will be persisted to "base_folder/persisted_task/"
    ```

    ```python
    from prefect import task
    from prefect_aws import S3Bucket
    from symph.prefect_utils.blocks import task_persistence_subfolder

    bucket: S3Bucket = ...
    # bucket.bucket_folder == "base_folder/"

    # Results will be persisted to "base_folder/persisted_task/"
    @task_persistence_subfolder(bucket, key="AlternativePersistedTask")
    @task(persist_result=True)
    def alternative_persisted_task(data: dict) -> dict:
        '''A task whose return value is persisted in a subfolder of `bucket`.
        '''
        ...

    # Results will be persisted to "base_folder/AlternativePersistedTask/"
    ```
    """

    def decorator(task):
        """Decorates the task to assign a new `task.result_storage`."""
        logger = get_prefect_or_default_logger()
        task.result_storage = create_child_bucket(
            key or task.fn.__name__,
            suffix or "-" + task.fn.__name__.replace("_", "-"),
            parent=bucket,
        )
        logger.debug(
            "Task %s is being persisted to storage %s",
            task,
            task.result_storage,
        )
        return task

    return decorator


if __name__ == "__main__":
    import doctest

    doctest.testmod()